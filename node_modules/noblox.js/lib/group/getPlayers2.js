// Dependencies
var parser = require('cheerio')
var Promise = require('bluebird')

// Includes
var http = require('../util/http.js').func
var jar = require('../util/jar.js').func
var getRole = require('./getRole.js').func
var getRoles = require('./getRoles.js').func
var generalRequest = require('../util/generalRequest.js').func
var threaded = require('../util/threaded.js').func

exports.required = ['group']
exports.optional = [
  ['rank', 'roleset', 'name'], 'page', 'stream'
]

exports.func = async function (args) {
  const roles = getRoles(args.group)
  let option, optionName

  if (args.rank) {
    option = args.rank
    optionName = 'rank'
  } else if (args.roleset) {
    option = args.roleset
    optionName = 'id'
  } else if (args.name) {
    option = args.name
    optionName = 'name'
  }

  let group = {
    players: [],
    stream: args.stream || false,
    totalPages: []
  }

  if (optionName === 'rank') {
    const roles = getRoles(args.group).reverse().map(role => { role.ID, role.rank }).filter(role => option.includes(role.rank))

    for (var role of roles) {
      const options = {
        url: `https://groups.roblox.com/v1/groups/${args.group}/roles/${role.ID}/users?cursor=&limit=100&sortOrder=Desc`,
        options: {
          method: 'GET',
          form: inputs,
          headers: {
            'User-Agent': 'Mozilla'
          },
          jar: jar()
        }
      }

      http(options).then(function (body) {
        var members = JSON.parse(body).data
        if (group.stream) {
          for (var member of members) {
            group.stream.write(member)
          }
        } else {
          for (var member of members) {
            group.players.push(member)
          }
        }
      })
    }
  }

  promise.getStatus = function () {
    return getStatus()
  }
  return promise
}
